load "Alternant.mgm";
load "QDOperations.mgm";
load "CodeProd.mgm";
load "CodeSquare.mgm";
load "UnShorten.mgm";



//==========================================================
//  Local functions
//==========================================================

function init_Attack_DAGS(num_DAGS)
    
    if (num_DAGS eq 0 or num_DAGS eq 5) then
        dim_short := 4;
    end if;
    if (num_DAGS eq 1 or num_DAGS eq 3) then
        dim_short := 6;
    end if;
    if (num_DAGS eq 5.1) then
        dim_short := 18;
    end if;
    if (num_DAGS eq 1.1) then
        dim_short := 10;
    end if;
     
    if (num_DAGS eq 0 or num_DAGS eq 5) then
        codim := 2;
    end if;
    if (num_DAGS eq 1 or num_DAGS eq 3) then
        codim := 4;
    end if;
    if (num_DAGS eq 5.1) then
        codim := 16;
    end if;
    if (num_DAGS eq 1.1) then
        codim := 8;
    end if;
    
    return dim_short, codim;

end function;



//==========================================================
// Raccourcir Inv jusqu'à ce que Dim(ShortInv) = dim_short (4 ou 6)
//==========================================================

function ShortenInvariant(Inv, dim_short, s)

    ShortInv := Inv;
    r := 0;
    
    while (Dimension(ShortInv) gt dim_short) do
        n := Length(ShortInv);
        ShortInv := ShortenCode(ShortInv,{n-(2^s-1)..n});
        r:= r + 1;
    end while;
    
    return ShortInv, r;

end function;



//==========================================================
// Construction de l'anneau de polynomes pour les équations
//==========================================================

function init_Ring_R(F, n, s, r, codim)

    nbr_var := 2*codim + s-1 + (n div 2^s) - r-1 ;
    printf "Number of variables: %o \n",nbr_var;
     
    R := PolynomialRing(F, nbr_var);
    U := ["u." cat IntegerToString(i) : i in [1..codim]];
    V := ["v." cat IntegerToString(i) : i in [1..codim]];
    X := ["x." cat IntegerToString(i) : i in [1..(n div 2^s) - r-1]]; 
    
    if (s eq 4) then 
        B := ["b","c","d"];
    end if;
    if (s eq 5) then
        B := ["b","c","d","e"];
    end if;
    if (s eq 6) then
        B := ["b","c","d","e","f"];
    end if;
    
    AssignNames(~R, U cat V cat B cat X);
    
    U := [R.i : i in [1..codim]];
    V := [R.i : i in [codim+1..2*codim]];
    
    j := 2*codim + 1;
    if (s eq 4) then 
        b := R.j; c := R.(j+1); d := R.(j+2); 
        B := [b,c,d]; 
    end if;
    if (s eq 5) then
        b:= R.j; c := R.(j+1); d := R.(j+2); e := R.(j+3);
        B := [b,c,d,e];
    end if;
    if (s eq 6) then
        b := R.j ; c := R.(j+1); d := R.(j+2); e := R.(j+3); f := R.(j+4);
        B := [b,c,d,e,f];
    end if;
    
    X := [R.i : i in [(j+s-1)..(j+s-2)+(n div 2^s) - r-1]];
    
    return R,U,V,B,X;

end function;


//==========================================================
// Construction du systeme d'équations 
//==========================================================

function System(R, B, X, Eq_X, a, b)

    orbit := [R | 0, a];
	for e in B do
	    A := [o + e : o in orbit];
	    orbit cat:= A;
	end for;
    vect_x := orbit;
    
    for xx in X do
        vect_x cat:= [xx + o : o in orbit];
    end for;
    
    vect_x := Matrix([vect_x]);
    Syst := Eq_X*Transpose(vect_x);

    return (ElementToSequence(Syst) cat [B[1] -b]);
    
end function;


//==========================================================
// Différentes formes de la matrice de INV(-1) (avec inconnues U et V) 
//==========================================================


function MatrixCase(Fld, cas, U, V, num_DAGS)

    if (num_DAGS eq 0) or (num_DAGS eq 5) then

        if (cas eq 0) then
            return Transpose(Matrix(Fld, [[1,0], [0,1], U, V]));
        end if;
        
        if (cas eq 1) then
            return Transpose(Matrix(Fld, [[1,0], U, [0,1], V]));
        end if;
        
        if (cas eq 2) then
            return Transpose(Matrix(Fld, [[1,0,0], [U[1],0,U[2]], [V[1],0,V[2]], [0,1,0], [0,0,1]]));
        end if;
        
        if (cas eq 3) then
            return Transpose(Matrix(Fld, [U, [1,0], [0,1], V]));
        end if;
        
        if (cas eq 4) then
            return Transpose(Matrix(Fld, [U, [1,0], V, [0,1]]));
        end if;
        
        if (cas eq 5) then
            return Transpose(Matrix(Fld, [U, V, [1,0], [0,1]]));
        end if;
    else //Pour DAGS_1 et DAGS_3
        
        if (cas eq 0) then
            return HorizontalJoin(IdentityMatrix(Fld,2), Matrix([U,V]));
        end if;
        
        /* Ne correspond plus à rien: à changer!!!
        if (cas eq 1) then
            return Transpose(Matrix(Fld, [[1,0], U, [0,1], V]));
        end if;
        
        if (cas eq 2) then
            return Transpose(Matrix(Fld, [[1,0], U, V, [0,1]]));
        end if;
        
        if (cas eq 3) then
            return Transpose(Matrix(Fld, [U, [1,0], [0,1], V]));
        end if;
        
        if (cas eq 4) then
            return Transpose(Matrix(Fld, [U, [1,0], V, [0,1]]));
        end if;
        
        if (cas eq 5) then
            return Transpose(Matrix(Fld, [U, V, [1,0], [0,1]]));
        end if;
        */
    end if;
    
end function;

//==========================================================
// 
//==========================================================


function Extract_TraceCode(FF, V0, V1, s, codim) 

    B0 := [V0[i] : i in [2*codim+1..2*codim+1+s-2]];
    orbit_0 := [0, 0];
	for e in B0 do
	    A := [o + e : o in orbit_0];
	    orbit_0 cat:= A;
	end for;
	x0 := orbit_0;
	
	X0 := [V0[i] : i in [2*codim+1+s-1..#V0]]; 
	for xx in X0 do
        x0 cat:= [xx + o : o in orbit_0];
    end for;
    x0 := Vector(x0);
    
   
    B1 := [V1[i] : i in [2*codim+1..2*codim+1+s-2]];
    orbit_1 := [0, 1];
	for e in B1 do
	    A := [o + e : o in orbit_1];
	    orbit_1 cat:= A;
	end for;
	x1 := orbit_1;
    
    X1 := [V1[i] : i in [2*codim+1+s-1..#V1]]; 
	for xx in X1 do
        x1 cat:= [xx + o : o in orbit_1];
    end for;
    x1 := Vector(x1);
    
    
    x0 := ChangeRing(x0,FF);
    x1 := ChangeRing(x1,FF);
    
    return LinearCode(Matrix([x0,x1]));
end function;



//==========================================================
// Retrouver y à partir de x (1ere etape)
//==========================================================


function Recover_short_y(FF, ShortInv, short_x, s)
    
    R<v> := PolynomialRing(FF);
    row := [R!short_x[2^i+1]: i in [0..s-1]] cat [v] ;
    Mat_gamma := ZeroMatrix(R,s+1,s+1);
    Mat_coeff := ZeroMatrix(R,s,s);
    
    Mat_gamma[1] := Vector(row);
    for i:=1 to s do
        Mat_coeff[i] := Vector(row[1..s]);
        row := [row[j]^2: j in [1..s+1]];
        Mat_gamma[i+1] := Vector(row);
    end for;
    
    coeff := FF!Determinant(Mat_coeff);
    gamma := coeff^(-1)*Determinant(Mat_gamma);
    
    
    ShortInv := PunctureRepetitions(ShortInv,2^s);
    Gen := ChangeRing(GeneratorMatrix(ShortInv),FF);
    n := Length(ShortInv);
    k := Dimension(ShortInv);
    
    x_tilde := [Evaluate(gamma, short_x[1+i*2^s]): i in [0..n-1]];
    
    
    Mx := DiagonalMatrix(x_tilde);
    My := Gen;

    for i:= 1 to ((n-k) div 2)-1 do
        My := VerticalJoin(My, Gen*(Mx^i));
    end for;

    K := Kernel(Transpose(My));
    
    /* Gérer ces cas autrement??? */
    if Rank(K) gt 1 then
        printf "There are several solutions for short_y (Space of dimension %o)\n", Rank(K);
        return [];
    end if;
    
    if Rank(K) eq 0 then
        printf "There is no solution for short_y (Space of dimension %o)\n", Rank(K);
        return [];
    end if;
    
    short_y := [ElementToSequence(K.1)[i]: j in [1..2^s], i in [1..n]];
    return (short_y);
    
end function;


//==========================================================
// Retrouver une orbite de plus pour y 
//==========================================================

function Recover_y(FF, Gen, y0, s)
    
    Gen := ChangeRing(Gen,FF);
    n := NumberOfColumns(Gen);

    y0_bis := Vector(y0 cat [0 : i in [1..2^s]]);
    MatPrody0 := Vector(Gen*Transpose(Matrix(y0_bis)));

    Trans_Gen := Transpose(Gen);
    y1 := Solution(Matrix(Trans_Gen[n-(2^s-1)..n]),-MatPrody0);
    
    y := ElementToSequence(y0) cat ElementToSequence(y1);
    
    return y;
    
end function;


//==========================================================
// Cas spécial: si j'ai poinconné une position de plus (un des X_i n'était déterminé: il y avait q éléments dans la variété)
//==========================================================


function Recover_yi(FF, Gen, y0, rm_pos, s)
    
    Gen := ChangeRing(Gen,FF);
    n := NumberOfColumns(Gen);
    i := 2^s*rm_pos;
    
    y0_bis := Vector(y0[1..i] cat [0 : i in [1..2^s]] cat y0[i+1..#y0]);
    MatPrody0 := Vector(Gen*Transpose(Matrix(y0_bis)));

    Trans_Gen := Transpose(Gen);
    y1 := Solution(Matrix(Trans_Gen[i+1..i+2^s]),-MatPrody0);
    
    y := y0[1..i] cat ElementToSequence(y1) cat y0[i+1..#y0];
    
    return y;
    
end function;



//==========================================================
//  Retrouver une orbite de plus pour x
//==========================================================

function Recover_x(FF, Gen, x0, y, s)
    
    Gen := ChangeRing(Gen,FF);
    n := NumberOfColumns(Gen);
    
    yGen := Gen*DiagonalMatrix(y);
    
    x0_bis := Vector(x0 cat [0 : i in [1..2^s]]);
    MatProdx0 := Vector(yGen*Transpose(Matrix(x0_bis)));
    
    Trans_yGen := Transpose(yGen);
    x1 := Solution(Matrix(Trans_yGen[n-(2^s-1)..n]),-MatProdx0);
    
    x := ElementToSequence(x0) cat ElementToSequence(x1);

    return x;
    
end function;


//==========================================================
// Cas spécial: si j'ai poinconné une position de plus (un des X_i n'était déterminé: il y avait q éléments dans la variété)
//==========================================================

function Recover_xi(FF, Gen, x0, y, rm_pos, s)
    
    Gen := ChangeRing(Gen,FF);
    n := NumberOfColumns(Gen);
    i := 2^s*rm_pos;
    
    yGen := Gen*DiagonalMatrix(y);
    
    x0_bis := Vector(x0[1..i] cat [0 : i in [1..2^s]] cat x0[i+1..#x0]);
    MatProdx0 := Vector(yGen*Transpose(Matrix(x0_bis)));
    
    Trans_yGen := Transpose(yGen);
    x1 := Solution(Matrix(Trans_yGen[i+1..i+2^s]),-MatProdx0);
    
    x := x0[1..i] cat ElementToSequence(x1) cat x0[i+1..#x0];

    return x;
    
end function;


//==========================================================
// Retrouver les bons U et V si il y a plusieurs solutions
//==========================================================

function Find_UV(list_V0, list_V1, codim)
    list_uv := [];
    
    if #list_V0 lt #list_V1 then
        Append(~list_uv, [list_V0[1][i] : i in [1..2*codim]]);
        for j := 2 to #list_V0 do
            uv := [list_V0[j][i] : i in [1..2*codim]];
            if (uv notin list_uv) then
                Append(~list_uv, uv);
            end if;
        end for;

        for uv in list_uv do
            j := 1;
            while j le #list_V1 do 
                if uv ne [list_V1[j][i] : i in [1..2*codim]] then
                    list_V1 := Remove(list_V1, j);
                else
                    j := j + 1;
                end if;
            end while;
        end for;
        
    else
        Append(~list_uv, [list_V1[1][i] : i in [1..2*codim]]);
        for j := 2 to #list_V1 do
            uv := [list_V1[j][i] : i in [1..2*codim]];
            if (uv notin list_uv) then
                Append(~list_uv, uv);
            end if;
        end for;
        
        for uv in list_uv do
            j := 1;
            while j le #list_V0 do 
                if uv ne [list_V0[j][i] : i in [1..2*codim]] then
                    list_V0 := Remove(list_V0, j);
                else
                    j := j + 1;
                end if;
            end while;
        end for;
    end if;
    
    return list_V0, list_V1; 
    
end function;


/*Les trois prochaines fonctions sont utiles dans FindVarieties */

//==========================================================
// 
//==========================================================


function RemovePosition(list_V0, list_V1, s, codim)
    
    sub_elt1 := [list_V0[1][i] : i in [1..2*codim + s - 1]];
    elt2 := [list_V0[2][i]: i in [1..#list_V0[2]]];
    
    i := 0;
    while IsSubsequence(sub_elt1, elt2) do
        i := i + 1;
        sub_elt1 cat:= [list_V0[1][2*codim+ s - 1+i]];
    end while;
    
    list_V0 := [Remove(elt2, 2*codim+ s - 1+ i)];
    
    elt2 := [list_V1[2][i]: i in [1..#list_V1[2]]];
    list_V1 := [Remove(elt2, 2*codim+ s - 1+ i)];
    
    return list_V0, list_V1, i;
    
end function;


//==========================================================
// Enlever la solution nulle
//==========================================================


function RejectZeroCases(list_Vx, codim)
    
    i:= 1;
    while i le #list_Vx do
        v := [list_Vx[i][j]: j in [2*codim + 1..#list_Vx[i]]];
        if Max(v) eq 0 then
            list_Vx := Remove(list_Vx, i);
        else
            i := i +1;
        end if;
    end while;
    
    return list_Vx;
end function;

//==========================================================
// Supprimer les solutions parasites (mauvais U, V)
//==========================================================

function RemoveBadSolutions(list_Vx, list_Valpha, codim, s, q)
    
    print "\n\nRemove bad solutions";
    nbr_sol := Min(#list_Vx, #list_Valpha);
    
    if (nbr_sol ge 1) then
        while (#list_Vx ne #list_Valpha) and (nbr_sol gt 0) do
            list_Vx, list_Valpha := Find_UV(list_Vx, list_Valpha, codim);
            nbr_sol := Min(#list_Vx, #list_Valpha);
        end while;    
    end if;
    
    rm := -1;
    if (nbr_sol eq q) then
        list_Vx, list_Valpha, rm := RemovePosition(list_Vx, list_Valpha, s, codim);
    end if;
    nbr_sol := Min(#list_Vx, #list_Valpha);
    return list_Vx, list_Valpha, nbr_sol, rm;
    
end function;



//==========================================================
// Résoudre le systemes
//==========================================================

function FindVarieties(R, U, V, B, X, Eq_X, s, codim, q)
    
    /* General case */
    Syst := System(R, B, X, Eq_X, 0, 1); // tr(a) = 0, tr(b) = 1
    Syst_alpha := System(R, B, X, Eq_X, 1, 0); //tr(alpha a)=1,tr(alpha b)=0

    Ix := ideal<R|Syst>;
    Ialpha := ideal<R|Syst_alpha>;
    
    print "Grobner basis computation\n";
    GBx := EasyBasis(Ix);
    GBx;
    print "Grobner basis computation\n";
    GBalpha := EasyBasis(Ialpha);
    GBalpha;
    
    list_Vx := Variety(ideal<R|GBx>);
    list_Valpha := Variety(ideal<R|GBalpha>);
    
    /* REMOVE BAD SOLUTIONS*/
    list_Vx, list_Valpha, nbr_sol, rm := RemoveBadSolutions(list_Vx, list_Valpha, codim, s,q);
    
    
    /* Case 1: tr(b) = 0, tr(c) = 1 */
    if nbr_sol eq 0 then
        print "Try tr(b) = 0, tr(c) = 1";
        
        Syst := System(R, B, X, Eq_X, 0, 0) cat [B[2]-1];
        Ix := ideal<R|Syst>;
        print "Grobner basis computation\n";
        GBx := EasyBasis(Ix);
        list_Vx := Variety(ideal<R|GBx>);
        
        /* Find list_Valpha */
        
        for j := 1 to #list_Vx do
            u := [list_Vx[j][i] : i in [1..codim]];
            v := [list_Vx[j][i] : i in [codim+1..2*codim]];
            
            EqU := [U[i]-u[i]: i in [1..codim]];
            EqV := [V[i]-v[i]: i in [1..codim]];
            EqB := [B[2]];
            
            EqUVB := EqU cat EqV cat EqB;
            Syst_alpha := System(R, B, X, Eq_X, 1, B[1]) cat EqUVB; 
                
            Ialpha := ideal<R|Syst_alpha>;
            print "Grobner basis computation\n";
            GBalpha := EasyBasis(Ialpha);
            list := Variety(ideal<R|GBalpha>);
                    
            if not(list subset list_Valpha) then
                list_Valpha := list_Valpha cat list;
            end if;  
        end for;
        
        list_Valpha := RejectZeroCases(list_Valpha, codim);
        
        /* REMOVE BAD SOLUTIONS*/
        list_Vx, list_Valpha, nbr_sol, rm := RemoveBadSolutions(list_Vx, list_Valpha, codim, s, q);
    
    end if;
    
    /* Case 2 : tr(b) = 0, tr(c) = 0, tr(d) = 1 */
    if nbr_sol eq 0 then
        print "Try tr(b) = 0, tr(c) = 0, tr(d) = 1";
        
        Syst := System(R, B, X, Eq_X, 0, 0) cat [B[2], B[3] -1];
        Ix := ideal<R|Syst>;
        print "Grobner basis computation\n";
        GBx := EasyBasis(Ix);
        list_Vx := Variety(ideal<R|GBx>);
        
        /* Find list_Valpha */
        
        for j := 1 to #list_Vx do
            u := [list_Vx[j][i] : i in [1..codim]];
            v := [list_Vx[j][i] : i in [codim+1..2*codim]];
            
            EqU := [U[i]-u[i]: i in [1..codim]];
            EqV := [V[i]-v[i]: i in [1..codim]];
            EqB := [B[3]];
            
            EqUVB := EqU cat EqV cat EqB;
            Syst_alpha := System(R, B, X, Eq_X, 1, B[1]) cat EqUVB; 
                
            Ialpha := ideal<R|Syst_alpha>;
            print "Grobner basis computation\n";
            GBalpha := EasyBasis(Ialpha);
            list := Variety(ideal<R|GBalpha>);
                    
            if not(list subset list_Valpha) then
                list_Valpha := list_Valpha cat list;
            end if;  
        end for;
        
        list_Valpha := RejectZeroCases(list_Valpha, codim);
        
        /* REMOVE BAD SOLUTIONS*/
        list_Vx, list_Valpha, nbr_sol, rm := RemoveBadSolutions(list_Vx, list_Valpha, codim, s, q);
        
    end if;
    
    /* Case 3 : tr(b) = 0, tr(c) = 0, tr(d) = 0 */
    if nbr_sol eq 0 then
        print "Try tr(b) = 0, tr(c) = 0, tr(d) = 0";
        
        Syst := System(R, B, X, Eq_X, 0, 0) cat [B[2], B[3], X[1]-1];
        Ix := ideal<R|Syst>;
        print "Grobner basis computation\n";
        GBx := EasyBasis(Ix);
        list_Vx := Variety(ideal<R|GBx>);
        
        /* Find list_Valpha */
        
        for j := 1 to #list_Vx do
            u := [list_Vx[j][i] : i in [1..codim]];
            v := [list_Vx[j][i] : i in [codim+1..2*codim]];
            
            EqU := [U[i]-u[i]: i in [1..codim]];
            EqV := [V[i]-v[i]: i in [1..codim]];
            EqB := [X[1]];
            
            EqUVB := EqU cat EqV cat EqB;
            Syst_alpha := System(R, B, X, Eq_X, 1, B[1]) cat EqUVB; 
                
            Ialpha := ideal<R|Syst_alpha>;
            print "Grobner basis computation\n";
            GBalpha := EasyBasis(Ialpha);
            list := Variety(ideal<R|GBalpha>);
                    
            if not(list subset list_Valpha) then
                list_Valpha := list_Valpha cat list;
            end if;  
        end for;
        
        list_Valpha := RejectZeroCases(list_Valpha, codim);
        
        /* REMOVE BAD SOLUTIONS*/
        list_Vx, list_Valpha, nbr_sol, rm := RemoveBadSolutions(list_Vx, list_Valpha, codim, s, q);
        
    end if;
    
    printf "There are %o element(s) in the variety\n", nbr_sol;
    return list_Vx, list_Valpha, nbr_sol, rm;
    
end function;




//==========================================================
// Principal function
//==========================================================


function Attack_DAGS(F, C, q, t, s, num_DAGS, verbose)

    GenC := GeneratorMatrix(C);
    n := Length(C);
    k := Dimension(C);
    
    dim_short, codim := init_Attack_DAGS(num_DAGS);
    
    /* Permutation group */
    Permuts := ListOfPermutations(n, s);
    Sym := Universe(Permuts);
    G := sub<Sym | Permuts>;
    
    /* Invariant code */
    Inv := Fix(C,G);

    /* Shorten Invariant code */
    ShortInv, r := ShortenInvariant(Inv, dim_short, s);
    Gen_ShortInv := GeneratorMatrix(ShortInv);
    
    ShortC := ShortenCode(C, {n-(r*2^s -1)..n});
    Gen_ShortC := GeneratorMatrix(ShortC);
    
    PunctD := Dual(ShortC);
    Gen_PunctD := GeneratorMatrix(PunctD);
    
    /* EQUATIONS */
    
    R,U,V,B,X := init_Ring_R(F, n, s, r, codim);
    SetVerbose("Faugere", verbose);
   
    /* GENERAL CASE */ //la matrice de Inv(-1) est sous la forme (I|A)
    cas := 0; 
    
    /* Equations of the subcode of codimension 2 (or 4)*/
    if (num_DAGS eq 0) or (num_DAGS eq 5) then
        var_subcode := Transpose(Matrix(R, [[1,0],[0,1],U,V]));
    else
        var_subcode := HorizontalJoin(IdentityMatrix(R,2), Matrix([U,V]));
    end if;
    Eq_subcode := var_subcode*ChangeRing(Gen_ShortInv,R);

    /* Equations to recover X */
    Eq_X := MatProd(Eq_subcode, ChangeRing(Gen_PunctD,R));
    
    /* Variety */
    list_Vx, list_Valpha, nbr_sol,rm:= FindVarieties(R,U,V,B,X,Eq_X,s,codim,q);
    
    /* OTHER CASES */ //Pas gérés finalement...
    
    /*
    if (nbr_sol eq 0) then
    
        cas := 1;
        print "case:", cas;
        /* Equations of the subcode of codimension 2 (or 4)
        var_subcode := MatrixCase(R, cas, U, V, num_DAGS);
        Eq_subcode := var_subcode*ChangeRing(Gen_ShortInv,R);
        
        /* Equations to recover X 
        Eq_X := MatProd(Eq_subcode, ChangeRing(Gen_PunctD,R));
    
        /* Variety 
        list_Vx,list_Valpha,nbr_sol,rm:=FindVarieties(R,U,V,B,X,Eq_X,s,codim,q);
        
    end if;
    
    if (nbr_sol eq 0) then
    
        cas := 2;
        print "case:", cas;
        
        /* Shorten Invariant code
        ShortInv, r := ShortenInvariant(Inv, dim_short+1, s);
        Gen_ShortInv := GeneratorMatrix(ShortInv);
        
        ShortC := ShortenCode(C, {n-(r*2^s -1)..n});
        Gen_ShortC := GeneratorMatrix(ShortC);
        
        PunctD := Dual(ShortC);
        Gen_PunctD := GeneratorMatrix(PunctD);
        
        /* EQUATIONS 
        
        R,U,V,B,X := Ring_R(F, n, s, r, codim);
        SetVerbose("Groebner", verbose);
        
        /* Equations of the subcode of codimension 2 (or 4)
        var_subcode := MatrixCase(R, cas, U, V, num_DAGS);
        Eq_subcode := var_subcode*ChangeRing(Gen_ShortInv,R);
        
        /* Equations to recover X 
        Eq_X := MatProd(Eq_subcode, ChangeRing(Gen_PunctD,R));
    
        /* Variety 
        list_Vx,list_Valpha,nbr_sol,rm:=FindVarieties(R,U,V,B,X,Eq_X,s,codim,q);
        
    end if;
    */
    
    //Au cas où...
    if (#list_Vx eq 0) or (#list_Valpha eq 0) then
        return [],[];
    end if;
    
    /* Recover short_x */
    printf "Recover short_x...";
                
    Vx := list_Vx[1];
    Valpha := list_Valpha[1];
                
    /* Trace<x> */
    FF<z> := ext<F|2>;
    TrX_FF := Extract_TraceCode(FF, Vx, Valpha, s, codim);
            
    Square_TrX := CodeSquare(TrX_FF);

    /* Conductor X := Dual(D*SubInv) */
                
    u := [Vx[i] : i in [1..codim]];
    v := [Vx[i] : i in [codim+1..2*codim]];
               
    Mat := MatrixCase(F, cas, u, v, num_DAGS);
    SubInv := LinearCode(Mat*Gen_ShortInv);
                
    Cond := Dual(CodeProd(PunctD, SubInv));
    Cond := LinearCode(ChangeRing(GeneratorMatrix(Cond),FF));
            
    if (rm ne -1) then
        Cond := PunctureCode(Cond,{2^s*rm + 1..2^s*(rm+1)});
    end if;
            
            
    /* Norm<x> */
    Norm_X := Square_TrX meet Cond;
  
    /* Recover short_x */
                
    len := Length(TrX_FF);
    short_x := 0;
    for c in TrX_FF do
        Norm_c := Vector([c[i]^(q+1): i in [1..len]]);
        if (Norm_c in Norm_X) and (c[2] ne 0) then
            short_x := c;
            break;
        end if;
    end for;
              
    if (short_x ne 0) then
        short_x := ElementToSequence(short_x[2]^(-1)*short_x); //normalisation
        print " [OK].";
                    
        /* Recover short_y */
        printf "Recover short_y...";
                        
        if (rm ne -1) then
            ShortInv := ShortenCode(ShortInv,{2^s*rm + 1..2^s*(rm+1)});
            ShortC := ShortenCode(C,{2^s*rm + 1..2^s*(rm+1)});
        end if;
                
        short_y := Recover_short_y(FF, ShortInv, short_x, s);
        print " [OK].";
                        
        /* Recover all x and y */
        printf "Recover all x and y...";
                        
        if (short_y ne []) then
                
            y0 := short_y;
            x0 := short_x;
                            
            if (rm ne -1) then
                Cbis := ShortC;
                n := Length(ShortC);
            else
                Cbis := C;
            end if;
                            
                            
            for i := 1 to r-1 do
                Gen := GeneratorMatrix(ShortenCode(Cbis,{n-((r-i)*2^s-1)..n}));
                y0 := Recover_y(FF, Gen, y0, s);
                x0 := Recover_x(FF, Gen, x0, y0, s);
            end for;
                                
            GenCbis := GeneratorMatrix(Cbis);
            y := Recover_y(FF, GenCbis, y0, s);
            x := Recover_x(FF, GenCbis, x0, y, s);
                            
            if (rm ne -1) then
                y := Recover_yi(FF, GenC, y, rm, s);
                x := Recover_xi(FF, GenC, x, y, rm, s); 
            end if;
            print " [OK].";
            
            return x,y;
               
        end if;
    end if;
    
    return [],[];
    
end function;



/*
if (DEBUG) then
        C1 := Alt(F, t + (2^s), m, x, y);
        InvC1 := Fix(C1,G);
        ShortInvC1 := InvC1;
        i := 1;
        while (Dimension(ShortInvC1) gt 2) do
            ShortInvC1 := ShortenCode(ShortInvC1,{n-(i*2^s-1)..n});
            i := i+1;
        end while;
        Gen_ShortInv := GeneratorMatrix(ShortInvC1);
        Eq_X := MatProd(ChangeRing(Gen_ShortInv,R), ChangeRing(Gen_PunctD,R));
        
        #list_Vx;
        #list_Valpha;
    end if;
    

*/









